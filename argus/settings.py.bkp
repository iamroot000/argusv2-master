"""
Django settings for argus project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
from __future__ import absolute_import

import os
import sys
from argus.defs.logging import LOGGING_PROD
from argus.defs.datasources import *
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
SECRET_KEY = '2-@j6u@tf3+n189p=o54s6+(mz@e1k=)ite7n=f)*&kxxf91b9'

#DEBUG = False
DEBUG = False

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    #'nrmt',
    'fwdcontrol',
    'LEManager',
    #'vergil',
    'esync',
    'smsalerts',
    'inventory',
    'domains',
    'proxycontroller',
    #'services',
    'easy_select2',
    'SSRCHECKER',
    'SSLDOMAINS',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'SSRCHECKER.ssrmiddleware.SSRMiddleware'
]

AUTHENTICATION_BACKENDS = [
    'PySAMLSP.spAuthBackend.spAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
]

LOGIN_URL='/login/'
LOGIN_REDIRECT_URL = '/'
LOGIN_IDP_ENDPOINT = 'https://sso.monaco1.me/samlsso'
LOGIN_PROVIDER = 'https://argus.omtools.me'
LOGIN_ISSUER = 'argus.omtools.me'
LOGIN_ACS_URL = "https://argus.omtools.me/acs"
CERTPEM = open(BASE_DIR+ '/PySAMLSP/certificate/cert.pem').read()
ROOT_URLCONF = 'argus.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'argus.context_processor.dps_menu_processor',
                'argus.context_processor.business_unit_processor',
                'argus.context_processor.nginx_hosts_processor',
                #'argus.context_processor.navigation_processor'
            ],
        },
    },
]

WSGI_APPLICATION = 'argus.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Singapore'
USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = '/static/'
STATICFILES_DIRS = [
os.path.join(BASE_DIR, "static/"),
]

if not DEBUG:
    LOGGING = LOGGING_PROD
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '[%(asctime)s]-[%(process)d]-[%(thread)x]-[%(levelname)s]-[%(module)s] --- %(message)s '
            },
            'simple':{
                'format': '[%(asctime)s]-[%(levelname)s] --- %(message)s '
            }
        },
        'handlers': {
           'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                #'level': os.getenv('DJANGO_LOG_LEVEL','DEBUG'),
                'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),

            },
        },
    }


#LEmoria_ENDPOINT = 'http://10.167.12.191:13567'
LEmoria_ENDPOINT = 'http://10.169.12.191:13567'

ENV = 'PROD' if 'gunicorn' in os.environ.get('SERVER_SOFTWARE','') else 'OTH'
#ENV = 'PROD'
print "ENVIRONMENT - {0}".format(ENV)


INITIALIZER_CELERY_WORKER_QUEUE = 'ansible-207'

